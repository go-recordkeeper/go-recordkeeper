<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev Blog</title>
    <link>https://go.chiquit.ooo/blog/</link>
    <description>Recent content on Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Nov 2022 18:12:13 -0500</lastBuildDate><atom:link href="https://go.chiquit.ooo/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Finishing Fastapi</title>
      <link>https://go.chiquit.ooo/blog/posts/9-finishing-fastapi/</link>
      <pubDate>Sun, 13 Nov 2022 18:12:13 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/9-finishing-fastapi/</guid>
      <description>I finished the FastAPI implementation, and the integration test suite now at least partially covers every endpoint. Considering the amount of work, there is surprisingly little to say about it.
The vertical slice architecture was nice to work with. I ended up creating a separate file for every record related endpoint, which basically just contained one function. It&amp;rsquo;s very legible, and maps directly to the corresponding test files. In fact, I&amp;rsquo;d like to put the tests in the endpoint files directly, but pytest needs a conftest.</description>
    </item>
    
    <item>
      <title>Testing Improvements</title>
      <link>https://go.chiquit.ooo/blog/posts/8-testing-improvements/</link>
      <pubDate>Fri, 11 Nov 2022 15:43:48 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/8-testing-improvements/</guid>
      <description>bad submodules :&#39;( I have come to discover that git submodules are not the be-all and end-all, tragically. I&amp;rsquo;m using them in goban-server-test to reference the various goban-server implementations, and it works fine when testing stuff on main. It sadly does not work well for testing local unco,mitted code. It is possible to set up a local directory as a git remote, set up a branch for local development, iteratively commit changes, and then pull them inside the submodule, but it&amp;rsquo;s not easy and it&amp;rsquo;s certainly not fun.</description>
    </item>
    
    <item>
      <title>Vertical Slice Architecture</title>
      <link>https://go.chiquit.ooo/blog/posts/7-vertical-slice-architecture/</link>
      <pubDate>Wed, 09 Nov 2022 14:22:45 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/7-vertical-slice-architecture/</guid>
      <description>I&amp;rsquo;ve been flipping through some NDC Conference recordings, and one of the talks caught my eye (also a considerably more succinct blog post, if you don&amp;rsquo;t have an hour to kill).
For context, the traditional .NET web application is designed in layers (the &amp;ldquo;onion model&amp;rdquo;, apparently?), with the database feeding up into the repository into the service into the UI. All of your SQL queries live in one place, which is separate from where your business logic lives, which is separate from your REST API, which is separate from your UI components.</description>
    </item>
    
    <item>
      <title>Quick Update</title>
      <link>https://go.chiquit.ooo/blog/posts/6-quick-update/</link>
      <pubDate>Mon, 31 Oct 2022 19:09:06 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/6-quick-update/</guid>
      <description>I just finished a work session, so a post feels obligatory, even though there&amp;rsquo;s nothing substantial to talk about.
I finished the authentication and record CRUD integration tests. Everything passes for django, and all the auth tests pass for fastapi (records are not yet implemented). Writing the tests uncovered a few small issues:
 django was accepting arbitrary integer board sizes. I fixed this to use a choices of 9x9, 13x13, or 19x19.</description>
    </item>
    
    <item>
      <title>Integration Testing Harness</title>
      <link>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</link>
      <pubDate>Sun, 30 Oct 2022 20:23:47 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</guid>
      <description>I&amp;rsquo;m back from vacation and it&amp;rsquo;s time to get testing. I need a test harness that can verify any goban-server implementation is correct. Every test should be run against a real service with a real database behind it.
The plan I already have one and a half goban-server implementations written in python and deployed with docker-compose. Therefore,
 Services being tested are started/stopped using docker-compose. Tests are written in Python+pytest.  Unfortunately, this has some corolaries:</description>
    </item>
    
    <item>
      <title>FastAPI Testing</title>
      <link>https://go.chiquit.ooo/blog/posts/4-fastapi-testing/</link>
      <pubDate>Thu, 06 Oct 2022 16:43:23 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/4-fastapi-testing/</guid>
      <description>As previously mentioned, the next step is to add pytest for unit testing. Mission accomplished.
This was pretty run of the mill testing stuff so I didn&amp;rsquo;t really learn anything, but I&amp;rsquo;m trying to write something for every unit of work I do, so I shall expound on my testing philosophies instead.
Unit tests: just say no For the record, I love tests. I worked for several years doing automated browser testing and enjoyed it.</description>
    </item>
    
    <item>
      <title>Introducing FastAPI</title>
      <link>https://go.chiquit.ooo/blog/posts/introducing-fastapi/</link>
      <pubDate>Wed, 05 Oct 2022 20:11:48 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/introducing-fastapi/</guid>
      <description>I decided that my first alternative implementation will be using FastAPI. FastAPI is purportedly a very lightweight and very fast Python web framework. While Django is &amp;ldquo;batteries included&amp;rdquo;, FastAPI is all about stripped down minimalism.
I know I hyped up learning funky new languages, but FastAPI is a new framework to me and I will also get some practice good practice reimplementing Django stuff in a somewhat familiar environment where copy/pasting is easy.</description>
    </item>
    
    <item>
      <title>Systemd Is Cool</title>
      <link>https://go.chiquit.ooo/blog/posts/systemd-is-cool/</link>
      <pubDate>Sun, 02 Oct 2022 22:17:12 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/systemd-is-cool/</guid>
      <description>And everything crashed To quote the last post:
 Going forward, I&amp;rsquo;d like to set up some scheduled database dumps as backups (even though the data is not very important and I&amp;rsquo;m backing it up manually), and set up a systemd service to start/restart the service automatically if my power ever goes out.
 The first time I left to play go without double checking the server, it was down. The docker-compose logs don&amp;rsquo;t show anything crash-like, so it&amp;rsquo;s likely that power was interrupted and the Raspberry Pi restarted silently without restarting the service.</description>
    </item>
    
    <item>
      <title>State of the App</title>
      <link>https://go.chiquit.ooo/blog/posts/state-of-the-app/</link>
      <pubDate>Thu, 22 Sep 2022 10:48:24 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/state-of-the-app/</guid>
      <description>Before I get into the technical details of the new apps I&amp;rsquo;m building, it would be helpful to describe the reference implementation, you know, for reference.
The app, in a nutshell Go Recordkeeper is a relatively simple Single Page Application. You can:
 Log in + Sign up Create new records See/edit your old records Add/undo moves in a record Review the moves played in a record Download .sgf files containing records  The intended user is of course me, but I wanted to add a proper auth flow and support multiple users so that anyone who wants to use it, can.</description>
    </item>
    
    <item>
      <title>Introduction to Go Recordkeeper</title>
      <link>https://go.chiquit.ooo/blog/posts/introduction/</link>
      <pubDate>Wed, 21 Sep 2022 18:55:29 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/introduction/</guid>
      <description>I like to play the board game Go. Personally, I find that Go is more conversational than adversarial. You and your opponent will both have ideas and opinions, you&amp;rsquo;ll ask each other questions, find surprising answers, be refuted or vindicated. Of course, at the end of the game someone wins, but that&amp;rsquo;s just the topic; for me, the joy is in the discussion.
After finishing a game, it&amp;rsquo;s sometimes nice to Go over the highlights with your opponent, or use an AI to get the &amp;ldquo;objectively&amp;rdquo; right answers.</description>
    </item>
    
  </channel>
</rss>
