<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on Dev Blog</title>
    <link>https://go.chiquit.ooo/blog/tags/kotlin/</link>
    <description>Recent content in kotlin on Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Nov 2023 17:48:59 -0500</lastBuildDate><atom:link href="https://go.chiquit.ooo/blog/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Done With Kotlin</title>
      <link>https://go.chiquit.ooo/blog/posts/32-done-with-kotlin/</link>
      <pubDate>Tue, 07 Nov 2023 17:48:59 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/32-done-with-kotlin/</guid>
      <description>Done and dusted. I confess that using Spring was not very inspiring. I did not have very fond memories of it, and now that seems justified. Kotlin was pretty neat though, considering that it&amp;rsquo;s constrained by running on the JVM.
Spring In fairness, Spring is very mature and has decades of layers and growth. It is capable of doing everything, and I assume that if I had grown along with it and had some knowledge of its expectations, I would have had a nicer time.</description>
    </item>
    
    <item>
      <title>Spring Suffering</title>
      <link>https://go.chiquit.ooo/blog/posts/31-spring-suffering/</link>
      <pubDate>Tue, 17 Oct 2023 21:20:19 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/31-spring-suffering/</guid>
      <description>Spring sucks, and I hate it. It&amp;rsquo;s late and I&amp;rsquo;m tired, but I&amp;rsquo;m trying to relate my sufferings now while they are still fresh.
The Goal My objective was to set up the /api/login/ endpoint, which is always my first step when working on a new implementation. There are several foundational components that all need to work together to achieve this:
 Request handling (obviously), with parameters and serialization/deserialization Password hashing JWT key signing SQL querying Configuration from environment variables  Request handling This was pretty easy.</description>
    </item>
    
    <item>
      <title>Gradle in Docker</title>
      <link>https://go.chiquit.ooo/blog/posts/30-gradle-in-docker/</link>
      <pubDate>Sun, 15 Oct 2023 14:18:59 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/30-gradle-in-docker/</guid>
      <description>The first step in starting a new implementation after the Hello World is to get it Hello World&amp;rsquo;ing in a docker image. After copy/pasting a boilerplate docker-compose.yml, we get integration tests and a local deployment DB for free.
Writing Dockerfiles that technically work is pretty trivial; you just COPY the entire project directory in, run your build tool (gradle in this case), and there you go. However, this is problematic in practice for compiled languages (like Kotlin), since the build is generally very expensive and time-consuming to run from scratch every time.</description>
    </item>
    
    <item>
      <title>Progress &#43; Kotlin</title>
      <link>https://go.chiquit.ooo/blog/posts/29-kotlin/</link>
      <pubDate>Mon, 09 Oct 2023 11:59:36 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/29-kotlin/</guid>
      <description>It&amp;rsquo;s been a few months! I&amp;rsquo;ve been busy playing Factorio, which scratches all the same itches as programming.
I did make some progress I forgot to document, so let&amp;rsquo;s go over that first.
Calculating score After finishing a game, it&amp;rsquo;s nice to be able to know who won. In go this is a rather involved process involving lots of arithmetic. You need to remove any dead groups, count all the empty intersections you control, add any prisoners you took, and add any handicap+komi to get your final score, which you can compare with your opponents.</description>
    </item>
    
  </channel>
</rss>
