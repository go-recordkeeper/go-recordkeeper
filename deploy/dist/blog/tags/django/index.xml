<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django on Dev Blog</title>
    <link>https://go.chiquit.ooo/blog/tags/django/</link>
    <description>Recent content in django on Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Nov 2022 15:43:48 -0500</lastBuildDate><atom:link href="https://go.chiquit.ooo/blog/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing Improvements</title>
      <link>https://go.chiquit.ooo/blog/posts/8-testing-improvements/</link>
      <pubDate>Fri, 11 Nov 2022 15:43:48 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/8-testing-improvements/</guid>
      <description>bad submodules :&#39;( I have come to discover that git submodules are not the be-all and end-all, tragically. I&amp;rsquo;m using them in goban-server-test to reference the various goban-server implementations, and it works fine when testing stuff on main. It sadly does not work well for testing local unco,mitted code. It is possible to set up a local directory as a git remote, set up a branch for local development, iteratively commit changes, and then pull them inside the submodule, but it&amp;rsquo;s not easy and it&amp;rsquo;s certainly not fun.</description>
    </item>
    
    <item>
      <title>Integration Testing Harness</title>
      <link>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</link>
      <pubDate>Sun, 30 Oct 2022 20:23:47 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</guid>
      <description>I&amp;rsquo;m back from vacation and it&amp;rsquo;s time to get testing. I need a test harness that can verify any goban-server implementation is correct. Every test should be run against a real service with a real database behind it.
The plan I already have one and a half goban-server implementations written in python and deployed with docker-compose. Therefore,
 Services being tested are started/stopped using docker-compose. Tests are written in Python+pytest.  Unfortunately, this has some corolaries:</description>
    </item>
    
    <item>
      <title>State of the App</title>
      <link>https://go.chiquit.ooo/blog/posts/state-of-the-app/</link>
      <pubDate>Thu, 22 Sep 2022 10:48:24 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/state-of-the-app/</guid>
      <description>Before I get into the technical details of the new apps I&amp;rsquo;m building, it would be helpful to describe the reference implementation, you know, for reference.
The app, in a nutshell Go Recordkeeper is a relatively simple Single Page Application. You can:
 Log in + Sign up Create new records See/edit your old records Add/undo moves in a record Review the moves played in a record Download .sgf files containing records  The intended user is of course me, but I wanted to add a proper auth flow and support multiple users so that anyone who wants to use it, can.</description>
    </item>
    
  </channel>
</rss>
