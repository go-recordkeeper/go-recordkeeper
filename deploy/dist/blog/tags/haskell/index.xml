<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haskell on Dev Blog</title>
    <link>https://go.chiquit.ooo/blog/tags/haskell/</link>
    <description>Recent content in haskell on Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jan 2023 12:54:00 -0500</lastBuildDate><atom:link href="https://go.chiquit.ooo/blog/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ticking Boxes With Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/20-ticking-boxes-with-haskell/</link>
      <pubDate>Tue, 31 Jan 2023 12:54:00 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/20-ticking-boxes-with-haskell/</guid>
      <description>I&amp;rsquo;ve finished implementing all the &amp;ldquo;interesting&amp;rdquo; record related endpoints in Haskell:
 Playing moves Passing Undoing moves Deleting records Updating records  The process was pretty mechanical:
 Copy a similar endpoint Rename the functions, add the new endpoint to Records.hs Copy the request/response from the FastAPI serializers (if necessary) Write the necessary SQL statements in hasql-th format Translate the endpoint logic from the FastAPI endpoint Run integration tests Iron out bugs until tests pass  The only real obstacles were:</description>
    </item>
    
    <item>
      <title>Go Logic in Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/18-go-logic-in-haskell/</link>
      <pubDate>Tue, 17 Jan 2023 22:15:43 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/18-go-logic-in-haskell/</guid>
      <description>I implemented the basic logic for the game of Go in Haskell. This is just a recording app, so it doesn&amp;rsquo;t need to have any knowledge of kos or scoring. The only difficult bit is capturing groups that have no liberties.
Design I started by naively writing simple functions, layering them on top of each other. This was relatively easy, as I&amp;rsquo;ve more or less got the hang of Haskell syntax at this point.</description>
    </item>
    
    <item>
      <title>Authentication in Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/17-haskell-auth/</link>
      <pubDate>Tue, 10 Jan 2023 19:24:07 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/17-haskell-auth/</guid>
      <description>Authentication in Haskell Accomplished.
JWT compliance Thanks to Haskell&amp;rsquo;s incredible type safety, I learned that the way I was using JWTs for authentication was not standards compliant, because it simply wasn&amp;rsquo;t possible to do in Haskell. My JWT payloads basically looked like this:
{ &amp;#34;id&amp;#34;: {user ID}, &amp;#34;exp&amp;#34;: {time of issue + 1 day}, } As it happens, the id field isn&amp;rsquo;t in the RFC. I had to change it to sub instead.</description>
    </item>
    
    <item>
      <title>Password Hashing</title>
      <link>https://go.chiquit.ooo/blog/posts/16-password-hashing/</link>
      <pubDate>Wed, 04 Jan 2023 20:43:50 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/16-password-hashing/</guid>
      <description>Password Hashing After much pain and suffering I have finally achieved password hashing in Haskell.
Password hashing overview To briefly summarize, you should never store raw passwords anywhere for any reason. Instead, when the user registers, the password is processed through a one-way, irreversible hash function first before it is inserted into the database. When the user attempts a login, the new password is passed through the same function and compared to the hash in the database.</description>
    </item>
    
    <item>
      <title>Gaining Momentum with Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/15-haskell-momentum/</link>
      <pubDate>Mon, 02 Jan 2023 23:19:49 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/15-haskell-momentum/</guid>
      <description>I&amp;rsquo;m finally getting some traction with Haskell, even if the going is slow. I&amp;rsquo;ve &amp;ldquo;finished&amp;rdquo; the register endpoint to the point that it passes the integration test:
module Auth.Register (register) where -- 30 (!) lines of imports data RegisterRequest = RegisterRequest { username :: String, email :: String, password :: String } deriving (Eq, Show) $(deriveJSON defaultOptions &amp;#39;&amp;#39;RegisterRequest) data RegisterResponse = RegisterResponse { id :: Int, username :: String, email :: String } deriving (Eq, Show) $(deriveJSON defaultOptions &amp;#39;&amp;#39;RegisterResponse) insert :: S.</description>
    </item>
    
    <item>
      <title>Skipping Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/13-skipping-haskell/</link>
      <pubDate>Fri, 02 Dec 2022 17:44:48 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/13-skipping-haskell/</guid>
      <description>I just discovered this fun tidbit of Haskell knowledge:
baz = do let foo1 = &amp;#34;bar&amp;#34; -- fine let foo2 = do &amp;#34;bar&amp;#34; -- weird, but fine let foo3 = (do &amp;#34;bar&amp;#34;) -- still fine let foo4 = ( do &amp;#34;bar&amp;#34; ) -- parse error (possibly incorrect indentation or mismatched brackets) I cannot figure out how to nest do blocks in a readable manner. I&amp;rsquo;m tired of having to wrestle Haskell every time I want to refactor something so I think I&amp;rsquo;m going to drop it for a bit and work on the Rust implementation instead.</description>
    </item>
    
    <item>
      <title>Ditching Servant</title>
      <link>https://go.chiquit.ooo/blog/posts/12-ditching-servant/</link>
      <pubDate>Sat, 19 Nov 2022 19:29:16 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/12-ditching-servant/</guid>
      <description>As promised, I have gained some ground on testing. servant-quickcheck is apparently dead and therefore not included in Stackage, which was obnoxious because it was still listed in the Servant tutorial. Still, I persevered and got a rudimentary test for the register endpoint working:
spec :: SpecWith ClientEnv spec = describe &amp;#34;Register&amp;#34; $ do let proxy = (Proxy :: Proxy (&amp;#34;api&amp;#34; :&amp;gt; RegisterAPI)) let registerClient = client proxy it &amp;#34;registers&amp;#34; $ \clientEnv -&amp;gt; do result &amp;lt;- runClientM (registerClient RegisterRequest {username = &amp;#34;foo&amp;#34;, email = &amp;#34;bar&amp;#34;, password = &amp;#34;baz&amp;#34;}) clientEnv result `shouldBe` (Right $ RegisterResponse {id = 1, username = &amp;#34;foo&amp;#34;, email = &amp;#34;bar&amp;#34;}) However, I wasn&amp;rsquo;t impressed with the runClientM (.</description>
    </item>
    
    <item>
      <title>Introducing Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/11-introducing-haskell/</link>
      <pubDate>Thu, 17 Nov 2022 22:05:47 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/11-introducing-haskell/</guid>
      <description>It&amp;rsquo;s Haskell time, oh boy!
I&amp;rsquo;ve been amped to do something practical with Haskell since I found Learn You a Haskell for Great Good. It&amp;rsquo;s available in full online, but it&amp;rsquo;s so good I bought it just to have it.
The good Haskell is a pretty cool language.
 It&amp;rsquo;s 100% functional. Mutating state isn&amp;rsquo;t just discouraged, it&amp;rsquo;s not allowed. Every function is a a pure function with no side affects.</description>
    </item>
    
  </channel>
</rss>
