<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dev Blog</title>
    <link>https://go.chiquit.ooo/blog/posts/</link>
    <description>Recent content in Posts on Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Mar 2023 20:26:57 -0400</lastBuildDate><atom:link href="https://go.chiquit.ooo/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Cleaning</title>
      <link>https://go.chiquit.ooo/blog/posts/23-spring-cleaning/</link>
      <pubDate>Thu, 16 Mar 2023 20:26:57 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/23-spring-cleaning/</guid>
      <description>With the release of the Haskell implementation, I took some time to mop up some of the mess I&amp;rsquo;ve made while trying to maintain momentum.
Selecting implementation Now that there are three implementations to choose from, I decided it was time to expose that functionality. I added a dropdown to the web app so that you can select which implementation is used for API requests. The Tailwind CSS library I&amp;rsquo;m using for components doesn&amp;rsquo;t provide a very opinionated style for the dropdown, so it looks a little janky in mobile mode, but it works OK.</description>
    </item>
    
    <item>
      <title>Finishing Haskell Deployment</title>
      <link>https://go.chiquit.ooo/blog/posts/22-finishing-haskell-deployment/</link>
      <pubDate>Thu, 09 Mar 2023 21:02:10 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/22-finishing-haskell-deployment/</guid>
      <description>After a month of respite, I have finally mustered the courage to get the Haskell implementation deployed and achieve some closure.
Building Haskell My first step was to simply retry the build and hope it just works. Not only did the Haskell build continue to crash, but the FastAPI build also began failing. So that was swell.
Making Pi from scratch My next step was to switch to a different Raspberry Pi, do a clean reinstall, and start from scratch.</description>
    </item>
    
    <item>
      <title>Wrapping Up Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/21-wrapping-up-haskell/</link>
      <pubDate>Tue, 07 Feb 2023 21:50:18 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/21-wrapping-up-haskell/</guid>
      <description>I&amp;rsquo;ve been procrastinating on the &amp;ldquo;final&amp;rdquo; Haskell post until I reached a point with some closure, so there&amp;rsquo;s quite a list.
Download The only remaining API endpoint is the download endpoint. This is non-trivial because it requires converting the record details and move list into a .sgf file.
I first tried using the sgf hackage package. Sadly it wasn&amp;rsquo;t included in the stackage (Haskell has two package repositories; anyone can upload anything to hackage, while stackage is a curated subset of hackage packages that are known to work).</description>
    </item>
    
    <item>
      <title>Ticking Boxes With Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/20-ticking-boxes-with-haskell/</link>
      <pubDate>Tue, 31 Jan 2023 12:54:00 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/20-ticking-boxes-with-haskell/</guid>
      <description>I&amp;rsquo;ve finished implementing all the &amp;ldquo;interesting&amp;rdquo; record related endpoints in Haskell:
 Playing moves Passing Undoing moves Deleting records Updating records  The process was pretty mechanical:
 Copy a similar endpoint Rename the functions, add the new endpoint to Records.hs Copy the request/response from the FastAPI serializers (if necessary) Write the necessary SQL statements in hasql-th format Translate the endpoint logic from the FastAPI endpoint Run integration tests Iron out bugs until tests pass  The only real obstacles were:</description>
    </item>
    
    <item>
      <title>Tangent - Hardware Upgrade</title>
      <link>https://go.chiquit.ooo/blog/posts/19-tangent-hardware-upgrade/</link>
      <pubDate>Fri, 27 Jan 2023 21:56:35 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/19-tangent-hardware-upgrade/</guid>
      <description>My velocity on the Haskell implementation has been stalling in favor of other infrastructural work I&amp;rsquo;ve been doing on my home network. It&amp;rsquo;s only tangentially related to the go recordkeeper, but it&amp;rsquo;s what I&amp;rsquo;ve been doing so that&amp;rsquo;s what I&amp;rsquo;m going to write about.
New NAS device! I recently acquired a Promethean Classflow ActiveConnect PRM-ACON1-01 Mini PC that I&amp;rsquo;ve been setting up as a NAS. It&amp;rsquo;s intended use was as a lightweight PC for attaching to a projector or monitor in a classroom setting.</description>
    </item>
    
    <item>
      <title>Go Logic in Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/18-go-logic-in-haskell/</link>
      <pubDate>Tue, 17 Jan 2023 22:15:43 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/18-go-logic-in-haskell/</guid>
      <description>I implemented the basic logic for the game of Go in Haskell. This is just a recording app, so it doesn&amp;rsquo;t need to have any knowledge of kos or scoring. The only difficult bit is capturing groups that have no liberties.
Design I started by naively writing simple functions, layering them on top of each other. This was relatively easy, as I&amp;rsquo;ve more or less got the hang of Haskell syntax at this point.</description>
    </item>
    
    <item>
      <title>Authentication in Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/17-haskell-auth/</link>
      <pubDate>Tue, 10 Jan 2023 19:24:07 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/17-haskell-auth/</guid>
      <description>Authentication in Haskell Accomplished.
JWT compliance Thanks to Haskell&amp;rsquo;s incredible type safety, I learned that the way I was using JWTs for authentication was not standards compliant, because it simply wasn&amp;rsquo;t possible to do in Haskell. My JWT payloads basically looked like this:
{ &amp;#34;id&amp;#34;: {user ID}, &amp;#34;exp&amp;#34;: {time of issue + 1 day}, } As it happens, the id field isn&amp;rsquo;t in the RFC. I had to change it to sub instead.</description>
    </item>
    
    <item>
      <title>Password Hashing</title>
      <link>https://go.chiquit.ooo/blog/posts/16-password-hashing/</link>
      <pubDate>Wed, 04 Jan 2023 20:43:50 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/16-password-hashing/</guid>
      <description>Password Hashing After much pain and suffering I have finally achieved password hashing in Haskell.
Password hashing overview To briefly summarize, you should never store raw passwords anywhere for any reason. Instead, when the user registers, the password is processed through a one-way, irreversible hash function first before it is inserted into the database. When the user attempts a login, the new password is passed through the same function and compared to the hash in the database.</description>
    </item>
    
    <item>
      <title>Gaining Momentum with Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/15-haskell-momentum/</link>
      <pubDate>Mon, 02 Jan 2023 23:19:49 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/15-haskell-momentum/</guid>
      <description>I&amp;rsquo;m finally getting some traction with Haskell, even if the going is slow. I&amp;rsquo;ve &amp;ldquo;finished&amp;rdquo; the register endpoint to the point that it passes the integration test:
module Auth.Register (register) where -- 30 (!) lines of imports data RegisterRequest = RegisterRequest { username :: String, email :: String, password :: String } deriving (Eq, Show) $(deriveJSON defaultOptions &amp;#39;&amp;#39;RegisterRequest) data RegisterResponse = RegisterResponse { id :: Int, username :: String, email :: String } deriving (Eq, Show) $(deriveJSON defaultOptions &amp;#39;&amp;#39;RegisterResponse) insert :: S.</description>
    </item>
    
    <item>
      <title>Speeding Up Integration Tests</title>
      <link>https://go.chiquit.ooo/blog/posts/14-speeding-up-integration-tests/</link>
      <pubDate>Sun, 01 Jan 2023 15:07:48 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/14-speeding-up-integration-tests/</guid>
      <description>Hiatus: other projects It&amp;rsquo;s been a hot minute! I&amp;rsquo;ve been working on a few different projects for the last month:
 Advent of Code (my solutions) configurator, a CLI tool for corralling system configuration files into a repository. It makes it much less painful to coordinate configs between multiple machines, especially: Setting up Neovim. Ultimately, I&amp;rsquo;m not that impressed.  Neovim: pros and cons My init.lua is still a work in progress, but nvim now does almost all the things that VSCode does.</description>
    </item>
    
    <item>
      <title>Skipping Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/13-skipping-haskell/</link>
      <pubDate>Fri, 02 Dec 2022 17:44:48 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/13-skipping-haskell/</guid>
      <description>I just discovered this fun tidbit of Haskell knowledge:
baz = do let foo1 = &amp;#34;bar&amp;#34; -- fine let foo2 = do &amp;#34;bar&amp;#34; -- weird, but fine let foo3 = (do &amp;#34;bar&amp;#34;) -- still fine let foo4 = ( do &amp;#34;bar&amp;#34; ) -- parse error (possibly incorrect indentation or mismatched brackets) I cannot figure out how to nest do blocks in a readable manner. I&amp;rsquo;m tired of having to wrestle Haskell every time I want to refactor something so I think I&amp;rsquo;m going to drop it for a bit and work on the Rust implementation instead.</description>
    </item>
    
    <item>
      <title>Ditching Servant</title>
      <link>https://go.chiquit.ooo/blog/posts/12-ditching-servant/</link>
      <pubDate>Sat, 19 Nov 2022 19:29:16 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/12-ditching-servant/</guid>
      <description>As promised, I have gained some ground on testing. servant-quickcheck is apparently dead and therefore not included in Stackage, which was obnoxious because it was still listed in the Servant tutorial. Still, I persevered and got a rudimentary test for the register endpoint working:
spec :: SpecWith ClientEnv spec = describe &amp;#34;Register&amp;#34; $ do let proxy = (Proxy :: Proxy (&amp;#34;api&amp;#34; :&amp;gt; RegisterAPI)) let registerClient = client proxy it &amp;#34;registers&amp;#34; $ \clientEnv -&amp;gt; do result &amp;lt;- runClientM (registerClient RegisterRequest {username = &amp;#34;foo&amp;#34;, email = &amp;#34;bar&amp;#34;, password = &amp;#34;baz&amp;#34;}) clientEnv result `shouldBe` (Right $ RegisterResponse {id = 1, username = &amp;#34;foo&amp;#34;, email = &amp;#34;bar&amp;#34;}) However, I wasn&amp;rsquo;t impressed with the runClientM (.</description>
    </item>
    
    <item>
      <title>Introducing Haskell</title>
      <link>https://go.chiquit.ooo/blog/posts/11-introducing-haskell/</link>
      <pubDate>Thu, 17 Nov 2022 22:05:47 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/11-introducing-haskell/</guid>
      <description>It&amp;rsquo;s Haskell time, oh boy!
I&amp;rsquo;ve been amped to do something practical with Haskell since I found Learn You a Haskell for Great Good. It&amp;rsquo;s available in full online, but it&amp;rsquo;s so good I bought it just to have it.
The good Haskell is a pretty cool language.
 It&amp;rsquo;s 100% functional. Mutating state isn&amp;rsquo;t just discouraged, it&amp;rsquo;s not allowed. Every function is a a pure function with no side affects.</description>
    </item>
    
    <item>
      <title>Monorepo</title>
      <link>https://go.chiquit.ooo/blog/posts/10-monorepo/</link>
      <pubDate>Mon, 14 Nov 2022 20:36:14 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/10-monorepo/</guid>
      <description>I bit the bullet and coallesced all the repositories into a single monorepo: go-recordkeeper. This looks less impressive, in the GitHub organization view, but is generally much nicer to work with. I left the old repositories there just to avoid breaking all those links, so I guess the trail of corpses is still imposing.
RIP git submodules 😭
Monorepofication The conversion process was rather lengthy and quite involved. I hope that my case was abnormally difficult because I had a lot of submodules that needed conversion into relative paths, but I cringe to think how much harder it would have been with more coworkers, possibly committing work at the same time.</description>
    </item>
    
    <item>
      <title>Finishing Fastapi</title>
      <link>https://go.chiquit.ooo/blog/posts/9-finishing-fastapi/</link>
      <pubDate>Sun, 13 Nov 2022 18:12:13 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/9-finishing-fastapi/</guid>
      <description>I finished the FastAPI implementation, and the integration test suite now at least partially covers every endpoint. Considering the amount of work, there is surprisingly little to say about it.
The vertical slice architecture was nice to work with. I ended up creating a separate file for every record related endpoint, which basically just contained one function. It&amp;rsquo;s very legible, and maps directly to the corresponding test files. In fact, I&amp;rsquo;d like to put the tests in the endpoint files directly, but pytest needs a conftest.</description>
    </item>
    
    <item>
      <title>Testing Improvements</title>
      <link>https://go.chiquit.ooo/blog/posts/8-testing-improvements/</link>
      <pubDate>Fri, 11 Nov 2022 15:43:48 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/8-testing-improvements/</guid>
      <description>bad submodules :&#39;( I have come to discover that git submodules are not the be-all and end-all, tragically. I&amp;rsquo;m using them in goban-server-test to reference the various goban-server implementations, and it works fine when testing stuff on main. It sadly does not work well for testing local unco,mitted code. It is possible to set up a local directory as a git remote, set up a branch for local development, iteratively commit changes, and then pull them inside the submodule, but it&amp;rsquo;s not easy and it&amp;rsquo;s certainly not fun.</description>
    </item>
    
    <item>
      <title>Vertical Slice Architecture</title>
      <link>https://go.chiquit.ooo/blog/posts/7-vertical-slice-architecture/</link>
      <pubDate>Wed, 09 Nov 2022 14:22:45 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/7-vertical-slice-architecture/</guid>
      <description>I&amp;rsquo;ve been flipping through some NDC Conference recordings, and one of the talks caught my eye (also a considerably more succinct blog post, if you don&amp;rsquo;t have an hour to kill).
For context, the traditional .NET web application is designed in layers (the &amp;ldquo;onion model&amp;rdquo;, apparently?), with the database feeding up into the repository into the service into the UI. All of your SQL queries live in one place, which is separate from where your business logic lives, which is separate from your REST API, which is separate from your UI components.</description>
    </item>
    
    <item>
      <title>Quick Update</title>
      <link>https://go.chiquit.ooo/blog/posts/6-quick-update/</link>
      <pubDate>Mon, 31 Oct 2022 19:09:06 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/6-quick-update/</guid>
      <description>I just finished a work session, so a post feels obligatory, even though there&amp;rsquo;s nothing substantial to talk about.
I finished the authentication and record CRUD integration tests. Everything passes for django, and all the auth tests pass for fastapi (records are not yet implemented). Writing the tests uncovered a few small issues:
 django was accepting arbitrary integer board sizes. I fixed this to use a choices of 9x9, 13x13, or 19x19.</description>
    </item>
    
    <item>
      <title>Integration Testing Harness</title>
      <link>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</link>
      <pubDate>Sun, 30 Oct 2022 20:23:47 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</guid>
      <description>I&amp;rsquo;m back from vacation and it&amp;rsquo;s time to get testing. I need a test harness that can verify any goban-server implementation is correct. Every test should be run against a real service with a real database behind it.
The plan I already have one and a half goban-server implementations written in python and deployed with docker-compose. Therefore,
 Services being tested are started/stopped using docker-compose. Tests are written in Python+pytest.  Unfortunately, this has some corolaries:</description>
    </item>
    
    <item>
      <title>FastAPI Testing</title>
      <link>https://go.chiquit.ooo/blog/posts/4-fastapi-testing/</link>
      <pubDate>Thu, 06 Oct 2022 16:43:23 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/4-fastapi-testing/</guid>
      <description>As previously mentioned, the next step is to add pytest for unit testing. Mission accomplished.
This was pretty run of the mill testing stuff so I didn&amp;rsquo;t really learn anything, but I&amp;rsquo;m trying to write something for every unit of work I do, so I shall expound on my testing philosophies instead.
Unit tests: just say no For the record, I love tests. I worked for several years doing automated browser testing and enjoyed it.</description>
    </item>
    
    <item>
      <title>Introducing FastAPI</title>
      <link>https://go.chiquit.ooo/blog/posts/introducing-fastapi/</link>
      <pubDate>Wed, 05 Oct 2022 20:11:48 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/introducing-fastapi/</guid>
      <description>I decided that my first alternative implementation will be using FastAPI. FastAPI is purportedly a very lightweight and very fast Python web framework. While Django is &amp;ldquo;batteries included&amp;rdquo;, FastAPI is all about stripped down minimalism.
I know I hyped up learning funky new languages, but FastAPI is a new framework to me and I will also get some practice good practice reimplementing Django stuff in a somewhat familiar environment where copy/pasting is easy.</description>
    </item>
    
    <item>
      <title>Systemd Is Cool</title>
      <link>https://go.chiquit.ooo/blog/posts/systemd-is-cool/</link>
      <pubDate>Sun, 02 Oct 2022 22:17:12 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/systemd-is-cool/</guid>
      <description>And everything crashed To quote the last post:
 Going forward, I&amp;rsquo;d like to set up some scheduled database dumps as backups (even though the data is not very important and I&amp;rsquo;m backing it up manually), and set up a systemd service to start/restart the service automatically if my power ever goes out.
 The first time I left to play go without double checking the server, it was down. The docker-compose logs don&amp;rsquo;t show anything crash-like, so it&amp;rsquo;s likely that power was interrupted and the Raspberry Pi restarted silently without restarting the service.</description>
    </item>
    
    <item>
      <title>State of the App</title>
      <link>https://go.chiquit.ooo/blog/posts/state-of-the-app/</link>
      <pubDate>Thu, 22 Sep 2022 10:48:24 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/state-of-the-app/</guid>
      <description>Before I get into the technical details of the new apps I&amp;rsquo;m building, it would be helpful to describe the reference implementation, you know, for reference.
The app, in a nutshell Go Recordkeeper is a relatively simple Single Page Application. You can:
 Log in + Sign up Create new records See/edit your old records Add/undo moves in a record Review the moves played in a record Download .sgf files containing records  The intended user is of course me, but I wanted to add a proper auth flow and support multiple users so that anyone who wants to use it, can.</description>
    </item>
    
    <item>
      <title>Introduction to Go Recordkeeper</title>
      <link>https://go.chiquit.ooo/blog/posts/introduction/</link>
      <pubDate>Wed, 21 Sep 2022 18:55:29 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/introduction/</guid>
      <description>I like to play the board game Go. Personally, I find that Go is more conversational than adversarial. You and your opponent will both have ideas and opinions, you&amp;rsquo;ll ask each other questions, find surprising answers, be refuted or vindicated. Of course, at the end of the game someone wins, but that&amp;rsquo;s just the topic; for me, the joy is in the discussion.
After finishing a game, it&amp;rsquo;s sometimes nice to Go over the highlights with your opponent, or use an AI to get the &amp;ldquo;objectively&amp;rdquo; right answers.</description>
    </item>
    
  </channel>
</rss>
