<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pytest on Dev Blog</title>
    <link>https://go.chiquit.ooo/blog/tags/pytest/</link>
    <description>Recent content in pytest on Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Nov 2022 18:12:13 -0500</lastBuildDate><atom:link href="https://go.chiquit.ooo/blog/tags/pytest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Finishing Fastapi</title>
      <link>https://go.chiquit.ooo/blog/posts/9-finishing-fastapi/</link>
      <pubDate>Sun, 13 Nov 2022 18:12:13 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/9-finishing-fastapi/</guid>
      <description>I finished the FastAPI implementation, and the integration test suite now at least partially covers every endpoint. Considering the amount of work, there is surprisingly little to say about it.
The vertical slice architecture was nice to work with. I ended up creating a separate file for every record related endpoint, which basically just contained one function. It&amp;rsquo;s very legible, and maps directly to the corresponding test files. In fact, I&amp;rsquo;d like to put the tests in the endpoint files directly, but pytest needs a conftest.</description>
    </item>
    
    <item>
      <title>Testing Improvements</title>
      <link>https://go.chiquit.ooo/blog/posts/8-testing-improvements/</link>
      <pubDate>Fri, 11 Nov 2022 15:43:48 -0500</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/8-testing-improvements/</guid>
      <description>bad submodules :&#39;( I have come to discover that git submodules are not the be-all and end-all, tragically. I&amp;rsquo;m using them in goban-server-test to reference the various goban-server implementations, and it works fine when testing stuff on main. It sadly does not work well for testing local unco,mitted code. It is possible to set up a local directory as a git remote, set up a branch for local development, iteratively commit changes, and then pull them inside the submodule, but it&amp;rsquo;s not easy and it&amp;rsquo;s certainly not fun.</description>
    </item>
    
    <item>
      <title>Quick Update</title>
      <link>https://go.chiquit.ooo/blog/posts/6-quick-update/</link>
      <pubDate>Mon, 31 Oct 2022 19:09:06 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/6-quick-update/</guid>
      <description>I just finished a work session, so a post feels obligatory, even though there&amp;rsquo;s nothing substantial to talk about.
I finished the authentication and record CRUD integration tests. Everything passes for django, and all the auth tests pass for fastapi (records are not yet implemented). Writing the tests uncovered a few small issues:
 django was accepting arbitrary integer board sizes. I fixed this to use a choices of 9x9, 13x13, or 19x19.</description>
    </item>
    
    <item>
      <title>Integration Testing Harness</title>
      <link>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</link>
      <pubDate>Sun, 30 Oct 2022 20:23:47 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</guid>
      <description>I&amp;rsquo;m back from vacation and it&amp;rsquo;s time to get testing. I need a test harness that can verify any goban-server implementation is correct. Every test should be run against a real service with a real database behind it.
The plan I already have one and a half goban-server implementations written in python and deployed with docker-compose. Therefore,
 Services being tested are started/stopped using docker-compose. Tests are written in Python+pytest.  Unfortunately, this has some corolaries:</description>
    </item>
    
    <item>
      <title>FastAPI Testing</title>
      <link>https://go.chiquit.ooo/blog/posts/4-fastapi-testing/</link>
      <pubDate>Thu, 06 Oct 2022 16:43:23 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/4-fastapi-testing/</guid>
      <description>As previously mentioned, the next step is to add pytest for unit testing. Mission accomplished.
This was pretty run of the mill testing stuff so I didn&amp;rsquo;t really learn anything, but I&amp;rsquo;m trying to write something for every unit of work I do, so I shall expound on my testing philosophies instead.
Unit tests: just say no For the record, I love tests. I worked for several years doing automated browser testing and enjoyed it.</description>
    </item>
    
  </channel>
</rss>
