<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pytest on Dev Blog</title>
    <link>https://go.chiquit.ooo/blog/tags/pytest/</link>
    <description>Recent content in pytest on Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Oct 2022 19:09:06 -0400</lastBuildDate><atom:link href="https://go.chiquit.ooo/blog/tags/pytest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quick Update</title>
      <link>https://go.chiquit.ooo/blog/posts/6-quick-update/</link>
      <pubDate>Mon, 31 Oct 2022 19:09:06 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/6-quick-update/</guid>
      <description>I just finished a work session, so a post feels obligatory, even though there&amp;rsquo;s nothing substantial to talk about.
I finished the authentication and record CRUD integration tests. Everything passes for django, and all the auth tests pass for fastapi (records are not yet implemented). Writing the tests uncovered a few small issues:
 django was accepting arbitrary integer board sizes. I fixed this to use a choices of 9x9, 13x13, or 19x19.</description>
    </item>
    
    <item>
      <title>Integration Testing Harness</title>
      <link>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</link>
      <pubDate>Sun, 30 Oct 2022 20:23:47 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/5-integration-testing-harness/</guid>
      <description>I&amp;rsquo;m back from vacation and it&amp;rsquo;s time to get testing. I need a test harness that can verify any goban-server implementation is correct. Every test should be run against a real service with a real database behind it.
The plan I already have one and a half goban-server implementations written in python and deployed with docker-compose. Therefore,
 Services being tested are started/stopped using docker-compose. Tests are written in Python+pytest.  Unfortunately, this has some corolaries:</description>
    </item>
    
    <item>
      <title>FastAPI Testing</title>
      <link>https://go.chiquit.ooo/blog/posts/4-fastapi-testing/</link>
      <pubDate>Thu, 06 Oct 2022 16:43:23 -0400</pubDate>
      
      <guid>https://go.chiquit.ooo/blog/posts/4-fastapi-testing/</guid>
      <description>As previously mentioned, the next step is to add pytest for unit testing. Mission accomplished.
This was pretty run of the mill testing stuff so I didn&amp;rsquo;t really learn anything, but I&amp;rsquo;m trying to write something for every unit of work I do, so I shall expound on my testing philosophies instead.
Unit tests: just say no For the record, I love tests. I worked for several years doing automated browser testing and enjoyed it.</description>
    </item>
    
  </channel>
</rss>
